// <auto-generated />
using CitySelection.WebApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CitySelection.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210804133801_FixRelationshipTypo")]
    partial class FixRelationshipTypo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CitySelection.WebApi.Models.Domains.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AnnualPM2_5Concentration")
                        .HasColumnType("float");

                    b.Property<int>("CostOfLivingIndex")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<string>("WikipediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnnualPM2_5Concentration = 17.0,
                            CostOfLivingIndex = 52,
                            CountryId = 1,
                            EnglishName = "Warsaw",
                            Name = "Warszawa",
                            Population = 1794,
                            WikipediaUrl = "https://en.wikipedia.org/wiki/Warsaw"
                        },
                        new
                        {
                            Id = 2,
                            AnnualPM2_5Concentration = 9.5,
                            CostOfLivingIndex = 79,
                            CountryId = 2,
                            EnglishName = "Munich",
                            Name = "München",
                            Population = 2606,
                            WikipediaUrl = "https://en.wikipedia.org/wiki/Munich"
                        },
                        new
                        {
                            Id = 3,
                            AnnualPM2_5Concentration = 11.4,
                            CostOfLivingIndex = 84,
                            CountryId = 3,
                            EnglishName = "Amsterdam",
                            Name = "Amsterdam",
                            Population = 1559,
                            WikipediaUrl = "https://en.wikipedia.org/wiki/Amsterdam"
                        },
                        new
                        {
                            Id = 4,
                            AnnualPM2_5Concentration = 8.0999999999999996,
                            CostOfLivingIndex = 83,
                            CountryId = 4,
                            EnglishName = "Dublin",
                            Name = "Dublin",
                            Population = 1173,
                            WikipediaUrl = "https://en.wikipedia.org/wiki/Dublin"
                        },
                        new
                        {
                            Id = 5,
                            AnnualPM2_5Concentration = 10.199999999999999,
                            CostOfLivingIndex = 94,
                            CountryId = 5,
                            EnglishName = "Copenhagen",
                            Name = "København",
                            Population = 1337,
                            WikipediaUrl = "https://en.wikipedia.org/wiki/Copenhagen"
                        },
                        new
                        {
                            Id = 6,
                            AnnualPM2_5Concentration = 11.300000000000001,
                            CostOfLivingIndex = 79,
                            CountryId = 6,
                            EnglishName = "Lyon",
                            Name = "Lyon",
                            Population = 1171,
                            WikipediaUrl = "https://en.wikipedia.org/wiki/Lyon"
                        },
                        new
                        {
                            Id = 7,
                            AnnualPM2_5Concentration = 20.100000000000001,
                            CostOfLivingIndex = 78,
                            CountryId = 7,
                            EnglishName = "Milan",
                            Name = "Milano",
                            Population = 3400,
                            WikipediaUrl = "https://en.wikipedia.org/wiki/Milan"
                        },
                        new
                        {
                            Id = 8,
                            AnnualPM2_5Concentration = 16.399999999999999,
                            CostOfLivingIndex = 42,
                            CountryId = 8,
                            EnglishName = "Bucharest",
                            Name = "București",
                            Population = 2155,
                            WikipediaUrl = "https://en.wikipedia.org/wiki/Bucharest"
                        });
                });

            modelBuilder.Entity("CitySelection.WebApi.Models.Domains.Climate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("MonthlySunshineHours")
                        .HasColumnType("int");

                    b.Property<int>("RainyDays")
                        .HasColumnType("int");

                    b.Property<double>("Temperature24hAvgHigh")
                        .HasColumnType("float");

                    b.Property<double>("Temperature24hAvgLow")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("Climates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            MonthlySunshineHours = 1589,
                            RainyDays = 163,
                            Temperature24hAvgHigh = 24.399999999999999,
                            Temperature24hAvgLow = -4.2000000000000002
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            MonthlySunshineHours = 1777,
                            RainyDays = 132,
                            Temperature24hAvgHigh = 24.399999999999999,
                            Temperature24hAvgLow = -2.5
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            MonthlySunshineHours = 1662,
                            RainyDays = 132,
                            Temperature24hAvgHigh = 22.100000000000001,
                            Temperature24hAvgLow = 0.80000000000000004
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            MonthlySunshineHours = 1452,
                            RainyDays = 129,
                            Temperature24hAvgHigh = 19.5,
                            Temperature24hAvgLow = 2.2999999999999998
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            MonthlySunshineHours = 1630,
                            RainyDays = 157,
                            Temperature24hAvgHigh = 22.199999999999999,
                            Temperature24hAvgLow = -0.80000000000000004
                        },
                        new
                        {
                            Id = 6,
                            CityId = 6,
                            MonthlySunshineHours = 2002,
                            RainyDays = 104,
                            Temperature24hAvgHigh = 27.699999999999999,
                            Temperature24hAvgLow = 0.29999999999999999
                        },
                        new
                        {
                            Id = 7,
                            CityId = 7,
                            MonthlySunshineHours = 1915,
                            RainyDays = 83,
                            Temperature24hAvgHigh = 29.199999999999999,
                            Temperature24hAvgLow = -0.90000000000000002
                        },
                        new
                        {
                            Id = 8,
                            CityId = 8,
                            MonthlySunshineHours = 2112,
                            RainyDays = 109,
                            Temperature24hAvgHigh = 29.800000000000001,
                            Temperature24hAvgLow = -4.7999999999999998
                        });
                });

            modelBuilder.Entity("CitySelection.WebApi.Models.Domains.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GdpPerCapita")
                        .HasColumnType("int");

                    b.Property<double>("InequalityIndex")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GdpPerCapita = 35957,
                            InequalityIndex = 28.5,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 2,
                            GdpPerCapita = 56956,
                            InequalityIndex = 29.699999999999999,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 3,
                            GdpPerCapita = 60461,
                            InequalityIndex = 26.800000000000001,
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 4,
                            GdpPerCapita = 99239,
                            InequalityIndex = 28.899999999999999,
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 5,
                            GdpPerCapita = 61478,
                            InequalityIndex = 27.5,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 6,
                            GdpPerCapita = 49492,
                            InequalityIndex = 28.5,
                            Name = "France"
                        },
                        new
                        {
                            Id = 7,
                            GdpPerCapita = 43376,
                            InequalityIndex = 33.399999999999999,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 8,
                            GdpPerCapita = 32950,
                            InequalityIndex = 34.799999999999997,
                            Name = "Romania"
                        });
                });

            modelBuilder.Entity("CitySelection.WebApi.Models.Domains.City", b =>
                {
                    b.HasOne("CitySelection.WebApi.Models.Domains.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CitySelection.WebApi.Models.Domains.Climate", b =>
                {
                    b.HasOne("CitySelection.WebApi.Models.Domains.City", "City")
                        .WithOne("Climate")
                        .HasForeignKey("CitySelection.WebApi.Models.Domains.Climate", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CitySelection.WebApi.Models.Domains.City", b =>
                {
                    b.Navigation("Climate");
                });

            modelBuilder.Entity("CitySelection.WebApi.Models.Domains.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
